;;  stellogen.txt
;;  20250102Z
;;  Alea, https://x.com/noncanonicAleae
;;  https://my.webchiver.net/article/1902547/x-com-noncanonicaleae-status-1874893997791170719---1902547.html
;;  French->English translation of the Guide to Boris Eng's Transcendental Syntax project

   Introduction
   
   1. Transcendental Syntax

Logic usually lives in more or less intercompatible *logical systems*. We can speak of logical pluralism.

Logics usually function with a computational basis named *syntax* that follows rules dictated by a higher level syntax named *semantic*. In particular, are imposed: usable objects, their form, their possible interactions, and the formulas or specifications that can be expressed.

This action at a distance between two hermetic spaces, while being the fruit of our perception of a certain structuration of reality, is an obstacle to the manipulation and understanding of logical mechanisms. Logical reality as such is not directly accessible (why would it be?).

Our understanding of logic can only rest on apparently arbitrary, while effective, considerations. One needs to be able to justify their relevance and to recontextualize, if not *naturalize* them (and thus maybe obtain a science of logic?). Transcendental syntax, conceived by Jean-Yves Girard, proposes:

 - a reorganization of the concepts of computation and logic to highlight their distinctions and interactions;
 - a reverse engineering of logic from syntactic computation allowing us to reframe our knowledge in a new logical environment;
 - a computational justification of logical principles.
 
    Example in automata theory
    
A finite automaton is a machine that can read a word (letter by letter and without memory) then accept it or not. An automaton can be characterized by its set of accepted words, making up its *recognized language*.

If faced with some given automaton, how to determine its recognized language? There are multiple possibilities:

 - analyze the automaton by evaluating and judging it (semantic option we want to avoid);
 - look at how it reacts against every word (rational but unrealistic option). What Girard calls the *usage sense*;
 - immerse the representation of automata and words in another larger interaction space in which we could test (in a more effective way) the automaton's reaction against a finite number of "exotic" objects allowing us to determine its recognized language. What Girard calls the *usine sense*.
 
   2. Stellar resolution

Stellar resolution is the (theoretical) language of transcendental syntax. It is a language functioning through asynchronous interaction of independent agents. This interaction is based on a unification algorithm (that involved in the Prolog language) working as a minimal computation core.

It represents computation by a network of syntactical constraints that must be resolved to propagate information. The result of the computation corresponds to the information left by the networks that remained coherent until the end without encountering conflicts.

These ideas already exist in logical programming but are reformulated and used differently. In particular, we assign a logical sense to objects (even if they can be seen this way, they are not supposed to represent relations or objects of logical systems).

This calculus can be understood in several ways. It is:

 - a process calculus;
 - a constraint-based programming language;
 - a variant of disjunctive clauses with Robinson's resolution rule;
 - a non-planar generalization of Wang tiles or abstract tile assembly models (aTAM);
 - a generalization of Jonoska's flexible tiles used in DNA computing;
 - a generalization of LEGO bricks;
 - a low-level language expressing logical sense;
 - a toolbox for constructing types/formulas;
 - a generalization of Jean-Yves Girard's proof structures;
 - a form of Lafont's interaction nets using no other rules than term unification principles.

   3. Stellogen language

The *Stellogen* language is a programming language used to define, manipulate, and put in interaction stellar resolution entities, and thus illustrate the principles of transcendental syntax.

It is one possible computer realization of stellar resolution and transcendental syntax, that makes design choices to adapt to programming practices.

It has an interpreter written in OCaml, as well as an execution engine for stellar resolution (which is an independent language) called "Large Star Collider" (LSC), also written in OCaml.

If stellar resolution is a language of elementary bricks (like LEGO), then:

 - transcendental syntax is the theory of bricks;
 - the Large Star Collider is the principle allowing brick connectivity;
 - Stellogen is a language allowing manipulation of these bricks to make advanced construction that would be too tedious to do by hand.
 
 Stellogen is the language we are going to explore step by step in this small guide.

   4. Getting started

To install the Stellogen interpreter, go to this Git repository:

https://github.com/engboris/transcendental-syntax

You can either compile from [sources](https://github.com/engboris/transcendental-syntax/blob/master/README.md#build-from-sources) or download a pre-compiled executable:

 - For Linux x86-64: https://github.com/engboris/transcendental-syntax/releases

You can then simply write your programs in any text file and follow the instructions in the [README.md](https://github.com/engboris/transcendental-syntax/blob/master/README.md#commands) file of the git repository to execute your programs.

For a quick preview, don't hesitate to look up:

 - [syntactic reference (cheat sheet)](https://github.com/engboris/transcendental-syntax/blob/master/examples/syntax.sg);
 - [program examples](https://github.com/engboris/transcendental-syntax/tree/master/examples);

If you are ready, let's go!

   Principles of stellar resolution
   
   5. Term unification

   Principle

In stellar resolution, a *ray* is either:

 - a *variable* that is written in capital letters and may contain `_` or numbers. Such as `X`, `X10` or `VAR_55`;
 - a *function symbol* prefixed by `+` (positive polarity), `-` (negative polarity), or `$` (null polarity or absence of polarity), possibly applied to an ordered sequence of other "argument" rays written in parentheses.

To make writing more readable, there exists an infix, right-associative binary symbol `:` letting us write `$a:X` instead of `:($a X)` or `$cons($a X)`.

**Examples of rays.** `$f(X)`, `+f(-h(X $a))`, `$s`, `+list($a $b $c)`, `+list($a:$b:$c:$nil)`.

In classical term unification theory, two terms are said to be *unifiable* when there exists a variable substitution that makes them equal. For example, `f(X)` and `f(h(Y))` are unifiable through the substitution `{X:=h(Y)}` replacing `X` by `h(Y)`.

The substitutions of interest to us are the most general ones. We could have considered the substitution `{X:=h(c(a)); Y:={c(a)}`, just as valid but needlessly precise.

By the same idea, in stellar resolution, we say two rays are *compatible* when their underlying terms (obtained by forgetting polarities) are unifiable, but we also want opposite-polarity function symbols to meet (instead of considering identical symbols):

 - `+f(X)` and `-f($h($a))` are compatible through `{X:=$h($a)}`;
 - `$f(X)` and `$f($h($a))` are incompatible;
 - `+f(X)` and `+f($h($a))` are incompatible;
 - `+f(+h(X))` and `-f(-h($a))` are compatible through `{X:=$a}`;
 - `+f(+h(X))` and `-f(-h(+a))` are compatible through `{X:=+a}`.


  Elementary entities in stellar resolution

In stellar resolution, we have:

 - rays;
 -*stars* which are unordered sequences of rays such as `+f(X) X` or `+f(+h(X)) $a $f($b)`;
 - *constellations* which are unordered sequences of stars separated by `;` and ending in `.`, such as `+f(X) X; +f(+h(X) $a $f($b)).`.

The empty star is written `[]` and the empty constellation `{}`.

Constellations are actually the smallest objects we will be able to manipulate. It is them that can be *executed*.

   6. Constellation execution
   
   Star fusion

Stars interact together by an operation named *fusion* (that could be called an interaction protocol), using the principle of the *Robinson resolution* rule. To explain the theory, let us define an operator `<i,j>` connecting the `i`th ray of a star to the `j`th ray of another star.

Fusion is defined for two compatible rays `r` and `r'`:

```
r r1 ... rk <0,0> r' r1' ... rk' == theta(r1) ... theta(rk) theta(r1') ... theta(rk')
```

where `theta` is the most general substitution induced by `r` and `r'`.

Note that:

 - `r` and `r'` are annihilated during interaction;
 - their two stars fuse;
 - the substitution obtained by resolving the conflict between `r` and `r'` is propagated to the adjacent rays.

**Example.** In a file, write then execute the following code:

```
print X +f(X); -f($a).
```

We obtain `a` because `+f(X)` interacted together then annihilated to update their neighbors with the substitution `{X:=$a}`. Thus the result is `X{X:=a}`, which is `a`.

This fusion operation corresponds to the cut rule for first order logic. However, the difference is here we are in an "alogical" framework (our symbols have no logical meaning).

   Execution

This works more or less like solving a puzzle! You have a constellation made of multiple stars. Choose initial stars, then copies of the other stars will be thrown on them to interact by fusion. The operation continues until there are no more possible interactions. The constellation obtained in the end is the execution result.

More formally, let `I` be the set of *initial stars* (to be seen as a sort of work or interaction space) and `R` the remainder, called *reference star space*. The execution proceeds in the following way:

 1. select a ray `ri` of a star `s` of `I`;
 2. search for all possible connections with rays `rj` of stars `s'` of `R`;
 3. duplicate `s` in `I` for each `rj` found;
 4. replace each copy of `s` by the fusion `s <i,j> s'`;
 5. repeat until there is no possible interaction left in `I`.

   Example

Consider the execution of the following constellation where the only initial star is prefixed by `@`:

```
+7($l:X) +7($r:X); $3(X) +8($l:X); @+8($r:X) $6(X);
-7(X) -8(X);
```

We split the constellation between reference constellation (left of `|-`) and interaction space (right of `|-`). For the example, we prefix the selected rays by `>>`. We have the following steps:

```
+7($l:X) +7($r:X); $3(X) +8($l:X); -7(X) >>-8(X) |- >>+8($r:X) $6(X);
```

```
+7($l:X) +7($r:X); $3(X) +8($l:X); -7(X) -8(X) |- -7($r:X) $6(X);
```

```
+7($l:X) >>+7($r:X); $3(X) +8($l:X); -7(X) -8(X) |- >>-7($r:X) $6(X);
```

```
+7($l:X) +7($r:X); $3(X) +8($l:X); -7(X) -8(X) |- +7($l:X) $6(X);
```

```
+7($l:X) +7($r:X); $3(X) +8($l:X); >>-7(X) -8(X) |- >>+7($l:X) $6(X);
```

```
+7($l:X) +7($r:X); $3(X) +8($l:X); -7(X) -8(X) |- -8($l:X) $6(X);
```

```
+7($l:X) +7($r:X); $3(X) >>+8($l:X); -7(X) -8(X) |- >>-8($l:X) $6(X);
```

```
+7($l:X) +7($r:X); $3(X) +8($l:X); -7(X) -8(X) |- $3(X) $6(X);
```

The result of the computation is a constellation containing only the star `$3(X) $6(X);`.

   Basics of Stellogen
   
   7. Defining constellations
   
   Comments

Comments begin with `'` and are written between `'''` for multi-line comments. They are ignored during execution.

   Static definitions

We can name constellations that are directly written. Identifiers follow the same rules as for ray function symbols.

```
x = +a; -a $b.
z = -f(X).
```

We can also choose to associate an identifier to another:

```
y = x.
```

As for application in functional programming, union of constellations is written with a space:

```
union1 = x y z.
```

We can also add parentheses around expressions for more readability or to avoid syntactic ambiguity:

```
union1 = (x y) z.
```

However, note that unlike in functional programming there is no defined ordering.

Static definitions correspond to the notion of "proof-object" in Curry-Howard correspondence.

   Display

To display constellations, you can use the command `show` followed by a constellation:

```
show +a; -a $b.
```

The `show` command does not execute constellation. If you want to actually execute the constellation and display its result, use the `print` command:

```
print +a; -a $b.
```

   Focus

If we wish for stars to be initial, they have to be prefixed with the symbol `@` (focus):

```
x = @+a; -a $b.
z = @-f(X).
```

Initial stars are put in a work space and are subject to fusion interaction with copies of the other stars.

We can also focus all stars of a constellation by prefixing it with `@`:

```
x = +a; -a $b.
z = -f(X).
union1 = (@x) z.
```

   Construction process

We can chain constellations with the expression `process ... end`:

```
c = process
  +n0($0).
  -n0(X) +n1($s(X)).
  -n1(X) +n2($s(X)).
end
```

This chain starts with the first constellation `+n0($0)`, considered to be *initial*. The next constellation then interacts with the previous one. Thus we have an interaction chain with a complete focus on the previous result.

It's as if we did the following computation:

```
$@+n0($0);
-n0(X) +n1($s(X)).
```

yielding

```
+n1($s($0)).
```

then

```
@+n1($s($0));
-n1(X) +n2($s(X)).
```

yielding

```
+n2($s($s($0))).
```

This is what corresponds to tactics in proof assistants such as Coq and could be assimilated to imperative programs which alter state representations (memory, for example).

Dynamical constructions correspond to the notion of "proof-process" in Boris Eng or "proof-trace" in Pablo Donato. Proof-processes construct proof-objects (constellations).

   Cleaning

In the result of an execution, if results are represented by null polarity rays, then stars containing polarized rays can be interpreted as incomplete computations that could be erased.

To do this, in construction processes, we can use the special expression `clean`:

```
c = process
  +n0($0).
  -n0(X) +n1($s(X)).
  -n1(X) +n2($s(X)).
  -n2(X) $result(X); -n2(X) +n3(X).
  clean.
end

print c.
```

We could use a ray `+n3(X)` to continue computations if so desired. The result is stored in `result(X)`. But if we only wish to keep the result and remove all other possibility of computation then we can also use `clean`.

   8. Galaxies

The Stellogen language adds to stellar resolution an entity named *galaxy*.

A galaxy is either a constellation or a structure with named fields containing other galaxies.

More generally, Stellogen actually manipulates galaxies rather than constellations (that are special cases of galaxy).

In Stellogen, "everything is galaxy" in the same way that everything is object is programming languages like *Smalltalk* or *Ruby*.

Galaxies are defined with blocks `galaxy ... end` containing a series of labels `label:` followed by the associated galaxy:

```
g = galaxy
  test1: +f($a) $ok.
`  test2: +f($b) $ok.
end
```

Fields of a galaxy are then accessed with `->`:

```
show g->test1.
show g->test2.
```

   9. Substitutions

Substitutions are expressions of the form `[... => ...]` replacing an entity by another.

   Variables

Variables can be replaced by any other ray:

```
print (+f(X))[X=>Y].
print (+f(X))[X=>+a(X)].
```

   Function symbols

Function symbols can be replaced by other function symbols:

```print (+f(X))[+f=>+g].
print (+f(X))[+f=>$f].
```

We can also omit the left or right part of `=>` to add or remove a head symbol:

```
print (+f(X); $f(X))[=>+a].
print (+f(X); $f(X))[=>$a].
print (+f(X); $f(X))[+f=>].
```

   Tokens and galactic replacement

Galaxy expressions can contain empty constellations named by identifiers such as `{1}`, `{2}`, `{3}` or `{variable}`.

These are holes named *tokens* that can be replaced by another galaxy:

```
print ({1} {2})[1=>+f(X) X][2=>-f($a)].
```

This allows, notably, to write parametrized galaxies.

   10. Typing

Typing in Stellogen uses transcendental syntax principles where types are defined as sets of tests themselves defined with constellations. Type checking implies passing all tests associated with a type.

Accordingly with the Curry-Howard correspondence, types can be seen as formulas or specifications. This could also be extended to Thomas Seiller's proposition to see algorithms as more elaborate specifications.

   Checkers

First of all we have to define *checkers* which are galaxies of a certain form containing:

 - an `interaction` field necessarily containing a `{tested}` token and another `{test}` token;
 - an `expect` field.

For example:

```
checker = galaxy
  interaction: {tested} {test}.
  expect: $ok.
end
```

The checker is a "judge" that defines how a constellation representing a test interacts with a constellation representing a tested element. The `expect` field is the constellation expected as a result for the described interaction.

   Typing by test

*Types* are then either constellations (if there is only one test) or galaxies where every field represents a test to pass.

Here is a type with a unique test for a naive representation of natural numbers:

```
nat =
  -nat($0) $ok;
  -nat($s(N)) +nat(N).
```

We can then write typing assertions of the form `x :: t [c]` where `x` is the tested element, `t` is the type, and `c` is the checker.

```
0 :: nat [checker]
0 = +nat($0).

1 :: nat [checker]
1 = +nat($s($0)).
```

   11. Exercises

   Paths

Give a value to the variables `answer` so that the following code can be executed without typing errors.

The idea is that these constellations represent paths to complete in order to obtain only the constellation `$ok` as a result.

```
checker = galaxy
  interaction: {test} {tested}.
  expect: $ok.
end
empty = {}.

answer = {replace_me}.
exercise1 :: empty [checker]
exercise1 = ((-1 $ok) {1})[1=>answer].

answer = {replace_me}.
exercise2 :: empty [checker]
exercise2 = ((-1; +2) {1})[1=>answer].

answer = {replace_me}.
exercise3 :: empty [checker]
exercise3 = ((-1 $ok; -2 +3) {1})[1=>answer].

answer = {replace_me}.
exercise4 :: empty [checker]
exercise4 = ((-f(+g(X)) $ok) {1})[1=>answer].

answer = {replace_me}.
exercise5 :: empty [checker]
exercise5 = ((+f($a) +f($b); +g($a); @+g($b) $ok) {1})[1=>answer].
```

Solutions

```
checker = galaxy
interaction: {test} {tested}.
expect: $ok.
end
empty = {}.


answer = +1.
exercise1 :: empty [checker]
exercise1 = ((-1 $ok) {1})[1=>answer].


answer = +1 -2 $ok.
exercise2 :: empty [checker]
exercise2 = ((-1; +2) {1})[1=>answer].


answer = +1 +2; -3.
exercise3 :: empty [checker]
exercise3 = ((-1 $ok; -2 +3) {1})[1=>answer].


answer = +f(-g(X)).
exercise4 :: empty [checker]
exercise4 = ((-f(+g(X)) $ok) {1})[1=>answer].


answer = -f($a); -f($b) -g($a) -g($b).
exercise5 :: empty [checker]
exercise5 = ((+f($a) +f($b); +g($a); @+g($b) $ok) {1})[1 => answer].
```

   Dynamical registers

Start from the following program:

```
init = +r0($0).

print process
  init.
  {replace_me}.
end
```

representing a memory with a register `r0`.

Stellogen can represent memory but in a particular way, by destroying to construct somewhere else. We cannot content ourselves of updating the register with a star `-r0(X) +r0($1)` as this star has a circular dependency that would allow it to be reused an unlimited number of times.

In fact, we can only move the register to modify it, for example with a star `-r0($0) +r1($1)` that destroys the register `r0` and constructs a register `r1` containing `$1`.

The goal is to define constellations. You can use the code above to do your tests.

**Exercise 1.** Define two constellations allowing to update the register `r0`to `1` by using an intermediary star to save the value of `r0`.

Solution

```
-r0(X) +tmp0(X).
-tmp0(X) +r0($1).
```

**Exercise 2.** Define a constellation allowing to duplicate and move the register `r0` in two registers `r1` and `r2`.

Solution

```
-r0(X) +r1(X);
-r0(X) +r2(X).
```

**Exercise 3.** Define two constellations allowing to set the value of `r1` to `$0` then define two constellations allowing to exchange the values of `r1` and `r2`.

Solution

```
-r1(X) +tmp0(X).
-tmp0(X) +r1($0).
-r1(X) +s1(X); -r2(X) +s2(X).
-s1(X) +r2(X); -s2(X) +r1(X).
```

**Exercise 4.** How to duplicate `r1` so as to be able to follow and update its copies all at once (as if dealing with a single register) to the value `$5`?

Solution

```
-r1(X) +r1($l X);
-r1(X) +r1($r X).
-r1(A X) +tmp0(A X).
-tmp0(A X) +r1(A $5).
```

**Exercise 5.** Using the previous method, duplicate all copies at once.

Solution

```
-r1(A X) +r1($l A X);
-r1(A X) +r1($r A X).
```

   Boolean logic
We want to simulate boolean formulas with constellations. Each question uses the result of the previous question.

**Exercise 1.** Define a constellation computing negation such that it yields `1` as output when added to the star `@-not($0 X) X` and `0` when added to `@-not($1 X) X`.

Solution

```
not = +not($0 $1); +not($1 $0).
```

**Exercise 2.** How to display the truth table of negation with a single star, such that we obtain the output `$table_not($0 $1); table_not($1 $0).`?

Solution

```
print @-not(X Y) $table_not(X Y).
```

**Exercise 3.** Write in two different ways constellations computing conjunction and disjunction and display their truth table in the same way as for the previous question.

Solution

```
and = +and($0 $0 $0); +and($0 $1 $0); +and($1 $0 $0); +and($1 $1 $1).
or  = +or($0 $0 $0); +or($0 $1 $1); +or($1 $0 $1); +or($1 $1 $1).


and2 = +and2($0 X $0); +and2($1 X X).
or2  = +or2($0 X X); +or2($1 X $1).


print @-and(X Y R) $table_and(X Y R).
print @-or(X Y R) $table_or(X Y R).
print @-and2(X Y R) $table_and2(X Y R).
print @-or2(X Y R) $table_or2(X Y R).
```

**Exercise 4.** Use disjunction and negation to display the truth table of implication given that `X => Y = not(X) \/ Y`.

Solution

```
impl  = -not(X Y) -or(Y Z R) +impl(X Z R).
impl2 = -not(X Y) -or2(Y Z R) +impl2(X Z R).


print @-impl(X Y R) $table_impl(X Y R).
print @-impl2(X Y R) $table_impl2(X Y R).
```

**Exercise 5.** Use implication and conjunction to display the truth table of logical equivalence given that `X <=> Y = (X => Y) /\ (X => Y)`.

Solution

```
eqq  = -impl(X Y R1) -impl(Y X R2) -and(R1 R2 R) +eqq(X Y R).
eqq2 = -impl2(X Y R1) -impl2(Y X R2) -and2(R1 R2 R) +eqq2(X Y R).


table_eqq  = @-eqq(X Y R) $table_eqq(X Y R).
table_eqq2 = @-eqq2(X Y R) $table_eqq2(X Y R).
```

**Exercise 6.** Define a constellation representing the formula of exclded middle `X \/ ~X`. Display the truth table corresponding to this formula.

Solution

```
ex = -not(X R1) -or(R1 X R2) +ex(X R2).
print -ex(X R) $table_ex(X R).
```

**Exercise 7.** Determine for which values of `X`, `Y` and `Z` the formula `X /\ ~(Y \/ Z)` is true.

Solution

```
print -or(Y Z R1) -not(R1 R2) -and(X R2 1) $x(X) $y(Y) $z(Z).
```




